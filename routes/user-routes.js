const express = require('express'),
      middleware = require("../middleware/index"),
      { check } = require ('express-validator'),
      userControllers = require('../controllers/user-controllers');

//Need the router method specifically so we can export and import into app.js
const router = express.Router();


///////////////////////////////////////////////////////////////////////////////////////////////     Registering

//////////////////////////////////////////////////////////////////////////////////////
//SHOW OUR REGISTRATION PAGE
//
//Middleware 'alreadyLoggedIn' will check if the user has already logged in or not.
//If they have already logged in, then it will prevent access to registering.
//////////////////////////////////////////////////////////////////////////////////////
router.get('/register', middleware.alreadyLoggedIn, userControllers.showRegisterPage);


///////////////////////////////////////////////////////////////////////////////////////
//HANDLE OUR REGISTRATION LOGIC
///////////////////////////////////////////////////////////////////////////////////////
router.post('/register', userControllers.registerUser);

///////////////////////////////////////////////////////////////////////////////////////////////     Logging in/out

//////////////////////////////////////////////////////////////////////////////////////
//SHOW OUR SIGNIN PAGE
//
//Middleware 'alreadyLoggedIn' will check if the user has already logged in or not.
//If they have already logged in, then it will prevent access to logging in again.
//////////////////////////////////////////////////////////////////////////////////////
router.get('/login', middleware.alreadyLoggedIn, userControllers.showLogInPage);


///////////////////////////////////////////////////////////////////////////////////////
//HANDLE OUR LOGIN LOGIC
///////////////////////////////////////////////////////////////////////////////////////
router.post('/login', userControllers.logInUser);


///////////////////////////////////////////////////////////////////////////////////////
//HANDLE OUR LOGOUT LOGIC
///////////////////////////////////////////////////////////////////////////////////////
router.post('/logout', userControllers.logOutUser);

///////////////////////////////////////////////////////////////////////////////////////////////     User profile page


//////////////////////////////////////////////////////////////////////////////////////
//SHOW OUR USER PROFILE PAGE
//
//Middleware 'isLoggedIn' will ensure the user is logged in.
//Make sure they are logged in to properly see this page
//////////////////////////////////////////////////////////////////////////////////////
router.get('/profile/:id', middleware.isLoggedIn, userControllers.showUserProfilePage);

///////////////////////////////////////////////////////////////////////////////////////////////     Forgot Password


//////////////////////////////////////////////////////////////////////////////////////
//HANDLE SHOWING OUR FORGOT PASSWORD PAGE
//////////////////////////////////////////////////////////////////////////////////////
router.get('/forgot', userControllers.showForgotPasswordPage);


///////////////////////////////////////////////////////////////////////////////////////
//HANDLE OUR FORGOT PASSWORD LOGIC
//
//This is in charge of sending the actual email if all necessary parameters are met
///////////////////////////////////////////////////////////////////////////////////////
router.post('/forgot', userControllers.resetPassword);


///////////////////////////////////////////////////////////////////////////////////////
//SHOW OUR RESET TOKEN PAGE
///////////////////////////////////////////////////////////////////////////////////////
router.get('/reset/:token', userControllers.showResetPasswordTokenPage);


///////////////////////////////////////////////////////////////////////////////////////
//HANDLE OUR FORGOT PASSWORD TOKEN LOGIC
//
//This is in charge of making sure everything is valid when reseting the password
///////////////////////////////////////////////////////////////////////////////////////
router.post('/reset/:token', userControllers.resetPasswordWithToken);

//Export our router so index.js can use it
module.exports = router; 